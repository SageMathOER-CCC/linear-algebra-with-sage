<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-matrix-operations"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Operations On Matrices</title>
    <introduction xml:id="sm-introduction-matrix-non-arithmetic-operations-">
        <p>
            <idx>
                <h>Matrices</h>
                <h>Operations</h>
            </idx>
            Matrices also support non-arithmetic, unary operations; operation that are
            applied to the matrix itself and its entrees. Some of these operations
            are shown below.
        </p>
    </introduction>

    <subsection>
        <title>Determinant and Inverse of a Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Determinants</h>
            </idx>
            The determinant of a square matrix is a scalar value that provides important
            information
            about the matrix, such as whether it is invertible and how it scales space during transformations.
            For an <m>n \times n</m> matrix <m>A</m>, the determinant is denoted as <m>\det(A)</m> or <m>|A|</m>.
            If the determinant is zero, the matrix is singular and does not have an inverse. In Sage, the determinant
            of a matrix can be computed using the <c>det</c> method:
        </p>
        <sage>
            <input>
                # Computing the determinant
                A = matrix([[2, 3, 5], [7, 11, 13], [17, 19, 23]])
                A.det()
            </input>
        </sage>
        <p>
            Note that the determinant of the identity matrix is 1, and the determinant of the zero matrix is 0.
        </p>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Inverse</h>
            </idx>
            The inverse of a matrix <m>A</m> is denoted as <m>A^{-1}</m> and is defined as the matrix that,
            when multiplied with <m>A</m>, yields the identity matrix. The inverse exists only if the determinant
            of the matrix is non-zero. In Sage, the inverse of a matrix can be computed using the <c>inverse</c> method:
        </p>
        <sage>
            <input>
                # Computing the inverse of matrix A
                A.inverse()
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Transpose and Conjugate of a Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Transpose</h>
            </idx>
            The transpose of a matrix is obtained by flipping it over its diagonal, swapping rows with columns.
            The transpose is denoted as <m>A^T</m> and can be computed in Sage using the <c>transpose</c> method:
        </p>
        <sage>
            <input>
                # Transpose of a matrix
                A.transpose()
            </input>
        </sage>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Complex Conjugate</h>
            </idx>
            For matrices with complex entries, the complex conjugate is found by taking the conjugate of each
            individual entry. This operation is often used in conjunction with the transpose to form the conjugate
            transpose (also called the Hermitian transpose)
        </p>
        <sage>
            <input>
                # Defining a complex matrix
                A = matrix(CC, [[1 + 2*I, 3 - I], [-2*I, 4]])

                # Computing the complex conjugate
                A.conjugate()
            </input>
        </sage>
        <p>
            Matrices with Complex values, and computing conjugates are very common in signal processing
            and quantum mechanics.
        </p>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Norm</h>
            </idx>
            Just like vectors, matrices also has a norm quantity defined. But unlike vectors, there are
            several types of norms for matrices. The method <c>norm</c> in Sage returns the Frobenius
            norm which is defined as the square root of the sum of the squares of all the entries in the
            matrix.
        </p>
        <sage>
            <input>
                # The norm of a matrix
                A = matrix([[1, 2], [3, 4]])
                A.norm()
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>LU Decomposition of a Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Upper Triangular Matrix</h>
                <h>Lower Triangular Matrix</h>
            </idx>
            The LU decomposition of a matrix is a factorization of the matrix into a product of a lower triangular
            matrix <m>L</m> and an upper triangular matrix <m>U</m>. This decomposition is useful for solving
            systems of linear equations and computing the determinant of the matrix.
        </p>
        <p>
            In Sage, the LU decomposition can be computed using the <c>LU()</c> method:
        </p>
        <sage>
            <input>
                # LU decomposition of a matrix
                A = matrix([[41, 37, 47], [61, 31, 59], [71, 73, 79]])
                P, L, U = A.LU()
                P # Permutation (or the pivot) matrix
            </input>
        </sage>
        <p>
            The product of the matrices <m>P</m>, <m>L</m>, and <m>U</m> yields the original matrix <m>A</m>.
            The matrix <m>P</m> is called the <em>Pivot</em> (or the permutation) matrix, which always has a
            determinant of 1 (has exactly one <m>1</m> in every row and column). The matrix <m>L</m> is the
            Lower triangular matrix L. its determinant is equal to the product of the diagonal entries.
        </p>
        <sage>
            <input>
                print(L, end="\n\n")
                print(L.determinant())
            </input>
        </sage>
        <p>
            Similarly, the matrix <m>U</m> is the Upper triangular matrix U. its determinant is also equal
            to the product of the diagonal entries.
        </p>
        <sage>
            <input>
                # The upper triangular matrix U
                U
            </input>
        </sage>
        <p>
            Note that the LU decomposition is not unique, and there are many different ways to perform it.
            For instance, we can choose to decomposition with a pivot that has a non-zero determinant (also
            equal to 1 in this case):
        </p>
        <sage>
            <input>
                P, L, U = A.LU(pivot='nonzero')
                print(P)
                print('-'*7+'\n',P.det())
            </input>
        </sage>
        <p>
            With<em>partial</em> pivoting, every entry of <m>L</m> will have absolute value of <m>1</m> or less.
        </p>
        <sage>
            <input>
                P, L, U = A.LU(pivot='partial')
                L
            </input>
        </sage>
        <p>
            Additionally, Sage offers different ways to format the display of the result of the LU decomposition.
        </p>
        <sage>
            <input>
                P, L, U = A.LU(format='plu')
                print(P, end="\n\n")
                print(L, end="\n\n")
                print(U, end="\n\n")
            </input>
        </sage>
        <p>
            And for a slightly compact format:
        </p>
        <sage>
            <input>
                P, M = A.LU(format='compact')
                print(P, end="\n\n")  # only display the diagonal entrees
                print(M, end="\n\n")  # combines the upper and lower triangular matrices
            </input>
        </sage>
    </subsection>
</section>
