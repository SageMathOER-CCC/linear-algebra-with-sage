<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-matrix-operations"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Operations on Matrices</title>

    <introduction xml:id="sm-introduction-matrix-operations">
        <idx>
            <h>Matrices</h>
            <h>Operations</h>
        </idx>
        <p>
            The concept of a matrix extends beyond just a simple grid of numbers; as we will
            later see, it serves as mathematical tool for structuring data, representing linear
            transformations, or solving systems of equations. Unlike vectors, which primarily
            describe magnitude and direction, matrices are used to encode transformations and
            relationships between multiple quantities.
        </p>
    </introduction>

    <subsection xml:id="subsubsec-matrix-arithmetic">
        <title>Matrix Arithmetic</title>
        <p>
            Matrix arithmetic extends familiar operations like addition and multiplication to the
            world of matrices. We'll learn how to add, subtract, and multiply matrices, explore
            properties of these operations, and see how they're used to solve systems of equations,
            represent compositions of transformations, and work with data in structured ways.
        </p>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Arithmetic</h>
            </idx>
            Matrices can be added, subtracted, and multiplied, similar to vectors. The addition
            and subtraction of matrices is performed element-wise, while matrix multiplication
            involves the dot product of rows and columns. The identity matrix serves as the
            multiplicative identity for matrices, and the zero matrix serves as the additive
            identity.
        </p>
        <sage>
            <input>
                # Defining two 3x3 matrices
                A = matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
                B = matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]])

                # Matrix addition.
                A + B
            </input>
        </sage>

        <sage>
            <input>
                # Matrix subtraction
                A - B
            </input>
        </sage>

        <p>
            Matrix multiplication comes in several forms. Scalar multiplication scales every entry
            in a matrix by a constant. Matrix-vector multiplication treats the vector as a column and
            combines it with the matrix using dot products. Matrix-matrix multiplication is only defined
            when the number of columns in the first matrix matches the number of rows in the second, and
            is performed by computing dot products of rows and columns.
        </p>
        <sage>
            <input>
                # Scalar multiplication
                A = matrix([[1, 2], [3, 4]])
                3 * A
            </input>
        </sage>

        <sage>
            <input>
                # Matrix-vector multiplication
                v = vector([1, 2])
                A * v
            </input>
        </sage>

        <sage>
            <input>
                # Matrix-matrix multiplication
                B = matrix([[0, 1], [1, 0]])
                A * B
            </input>
        </sage>

        <p>
            Note that to use the result of these operations, you would need to assign them to a variable.
        </p>
    </subsection>

    <subsection>
        <title>Determinant and Inverse of a Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Determinants</h>
            </idx>
            The determinant of a square matrix is a scalar value that provides important information
            about the matrix, such as whether it is invertible and how it scales space during transformations.
            For an <m>n \times n</m> matrix <m>A</m>, the determinant is denoted as <m>\det(A)</m> or <m>|A|</m>.
            If the determinant is zero, the matrix is singular and does not have an inverse. In Sage, the determinant
            of a matrix can be computed using the <c>det</c> method:
        </p>
        <sage>
            <input>

                # Computing the determinant
                A.det()
            </input>
        </sage>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Inverse</h>
            </idx>
            The inverse of a matrix <m>A</m> is denoted as <m>A^{-1}</m> and is defined as the matrix that,
            when multiplied with <m>A</m>, yields the identity matrix. The inverse exists only if the determinant
            of the matrix is non-zero. In Sage, the inverse of a matrix can be computed using the <c>inverse</c> method:
        </p>
        <sage>
            <input>
                # Computing the inverse of matrix A
                A.inverse()
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Transpose and Conjugate of a Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Transpose</h>
            </idx>
            The transpose of a matrix is obtained by flipping it over its diagonal, swapping rows with columns.
            The transpose is denoted as <m>A^T</m> and can be computed in Sage using the <c>transpose</c> method:
        </p>
        <sage>
            <input>
                # Transpose of a matrix
                A = matrix([[2, 3, 1], [4, 5, 6], [7, 8, 9]])
                print("Matrix A:")
                print(A)
                print("Transpose(A):")
                A.transpose()
            </input>
        </sage>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Complex Conjugate</h>
            </idx>
            For matrices with complex entries, the complex conjugate is found by taking the conjugate of each
            individual entry. This operation is often used in conjunction with the transpose to form the conjugate
            transpose (also called the Hermitian transpose)
        </p>
        <sage>
            <input>
                # Defining a complex matrix
                A = matrix(CC, [[1 + 2*I, 3 - I], [-2*I, 4]])

                # Computing the complex conjugate
                A.conjugate()
            </input>
        </sage>
        <p>
            Matrices with Complex values, and computing conjugates are very common in signal processing
            and quantum mechanics.
        </p>

        <p>
            <idx>
                <h>Matrices</h>
                <h>Norm</h>
            </idx>
            Just like vectors, matrices also has a norm quantity defined. But unlike vectors, there are
            several types of norms for matrices. The method <c>norm</c> in Sage returns the Frobenius
            norm which is defined as the square root of the sum of the squares of all the entries in the
            matrix.
        </p>
        <sage>
            <input>
                # The norm of a matrix
                A = matrix([[1, 2], [3, 4]])
                A.norm()
            </input>
        </sage>
    </subsection>
</section>
