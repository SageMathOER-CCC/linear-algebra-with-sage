<section xml:id="sec-row-reduction" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Row Reduction</title>
    <section xml:id="sec-gauss-jordan-method">
        <title>Gauss-Jordan Method</title>
        <p>
            The <term>Gauss-Jordan Method</term> of solving systems of equations works 
            by first representing a system of equations as a matrix then using <term>Elementary Row Operations</term>
            to reach a matrix's <term>Reduced Row Echelon Form</term>. 
            When in this form a matrix represents all solutions of a system of equations.
        </p>
        <p>
        A matrix is in <term>Reduced Row Echelon Form</term> if:
        <ul>
            <li>
                <p>
                    The first nonzero number in the row is a leading <m>1</m>.
                </p>
            </li>
            <li>
                <p>
                    In any two consecutive rows that do not consist entirely of zeros, the leading <m>1</m> in the lower row occurs farther to the right than the leading <m>1</m> in the higher row.
                </p>
            </li>
            <li>
                <p>
                    Rows that consist entirely of zeros are at the bottom of the matrix.
                </p>
            </li>
            <li>
                <p>
                    Each column that contains a leading <m>1</m> has zeros everywhere else in that column.
                </p>
            </li>
        </ul>
        </p>
    </section>
    <section xml:id="sec-elementary-row-operations">
        <title>Elementary Row Operations</title>
        <p>
            The <c>add_multiple_of_row(i, j, s)</c> method preforms an elementary row operation on a matrix by adding <m>s</m> times row <m>j</m> to row <m>i</m>. 
            The arguments use <m>0</m> based indexing.
        </p>
        <sage>
            <input>
                I = identity_matrix(3)
                I.add_multiple_of_row(0, 2, -3)
                I
            </input>
            <output>

            </output>
        </sage>
        <p>
            The <c>swap_rows(r1, r2)</c> method also preforms an elementary row operation on a matrix by swapping rows <c>r1</c> and <c>r2</c>. 
        </p>
        <sage>
            <input>
                I = identity_matrix(3)
                I.swap_rows(0, 2)
                I
            </input>
            <output>

            </output>
        </sage>
    </section>

    <section xml:id="sec-preforming-row-reduction">
        <title>Preforming Row Reduction</title>
        <p>
            Let's use Sage to find the reduced echelon form of the following system of equations:
        </p>
        <md>
            <mrow>
            \begin{array}{c}
            0x + y -  z = 0\\
            x + 2y + 0z = 4\\
            x + 0y + 2z = 4
            \end{array}
            </mrow>
        </md>
        <p>
            First, we create the <term>augmented matrix</term> for the system of equations. Each row in the augmented matrix lists the coefficients of the variables in an equation. While we do not directly manipulate the variables themselves, they indicate the position of each coefficient. The last column of the augmented matrix contains the constants from the right-hand side of each equation.
        </p>
        <md>
        <mrow>
            \left[\begin{array}{ccc|c}
            0 \amp 1 \amp -1 \amp 0 \\
            1 \amp 2 \amp 0 \amp 4 \\
            1 \amp 0 \amp 2 \amp 4
            \end{array}\right]
        </mrow>
        </md>
        <p>
            Define the coefficient matrix.
        </p>
        <sage>
            <input>
                A = matrix([
                    [0, 1, -1],
                    [1, 2, 0],
                    [1, 0, 2]
                ])
                A
            </input>
            <output>

            </output>
        </sage>
        <p>
            Define the constants vector.
        </p>
        <sage>
            <input>
                b = vector([0, 4, 4])  # Right-hand side of the equations
                b
            </input>
            <output>

            </output>
        </sage>
        <p>
            Next, create the augmented matrix by passing the constants vector to the <c>augment()</c> method of the coefficient matrix.
        </p>
        <sage>
            <input>
                Ab = A.augment(b)
                Ab
            </input>
            <output>

            </output>
        </sage>
        <p>
            Alternatively, we can create the augmented matrix directly by passing a list of lists to the matrix function.
        </p>
        <sage>
            <input>
                Ab = matrix([
                        [0, 1, -1, 0], # y - z  = 0
                        [1, 2, 0, 4],  # x + 2y = 4
                        [1, 0, 2, 4]   # x + 2z = 4
                    ])
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            First, we will move the leading <m>1</m> from row <c>1</c> to row <c>0</c>.
        </p>
        <sage>
            <input>
                Ab.swap_rows(0,1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            The next step is to multiply the first row by <m>-1</m> and add it to the third row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(2, 0, -1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Next, multiple the second row by <m>2</m> and add it to the third row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(2, 1, 2)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Multiply the second row by <m>-2</m> and add it to the first row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(0, 1, -2)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Now that we have the system in reduced echelon form, we can refer to the variables we can find the solution.
        </p>
        <p>
            Sage has a built in method to do all of this for us. 
            The <c>rref()</c> method returns the Reduced Row Echelon Form of a matrix.
        </p>
        <sage>
            <input>
                Ab = matrix([ # Re-use our old augmented matrix
                        [0, 1, -1, 0],
                        [1, 2, 0, 4],
                        [1, 0, 2, 4] 
                    ])
                Ab.rref()
            </input>
            <output>
            </output>
        </sage>
    </section>
</section>
