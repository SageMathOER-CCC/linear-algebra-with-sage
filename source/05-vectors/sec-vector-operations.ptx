<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-vector-operations"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Operations on Vectors</title>

    <introduction xml:id="introduction-vector-operations">
        <idx>
            <h>Vectors</h>
        </idx>

        <p>
            The concept of a vector extends beyond just the familiar 2D and 3D spaces and can exist
            in any dimension <m>n</m>. The key detail about a vector is that it provides both
            a magnitude and a direction in a given space. A vector in <m>R^n</m> is an ordered
            collection of <m>n</m> numbers, represented as <m>(v_1, v_2, ..., v_n)</m>, where
            each <m>v_i</m> is a number in <m>R</m>.
        </p>

        <p> The space <m>R^n</m> refers to an <m>n</m>-dimensional space where each vector
            corresponds to a <em>point</em> or a <em>direction</em>. In the two-dimensional space <m>R^2</m>,
            for example, vectors are represented a pair <m>(x, y)</m>, and in three-dimensional space
            <m>R^3</m>, vectors are represented by triples <m>(x, y, z)</m>.
        </p>
    </introduction>

    <subsection xml:id="subsubsec-rings-of-vectors">
        <title>Field and Rings of Vectors</title>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Ring</h>
            </idx>
            Vectors in sage can be created in different <em>Fields</em> based on the datatype of the
            elements of the vector. The method <c>base_ring</c> returns the base ring of the vector:
            The <m>Integer</m> ring is represented in Sage as <m>ZZ</m>, while the <m>QQ</m> is the
            ring of rational numbers.
        </p>
        <p>
            To create a vector in the real field <m>RR</m> or the rational numbers field <m>QQ</m>,
            we need to pass the field to the <c>vector</c> command.
        </p>
        <sage>
            <input>
                # creating 3D vectors in different fields
                components = [1, 2, 3]

                # 3D vectors in the Integers field
                v1 = vector(ZZ, components)

                # 3D vectors in the Rational Numbers field
                v2 = vector(QQ, components)

                # 3D vectors in the Reals field
                v3 = vector(RR, components)

                # Checking the base ring of these vectors
                print(v1, "is a vector in", v1.base_ring())
                print(v2, "is a vector in", v2.base_ring())
                print(v3, "is a vector in", v3.base_ring())
            </input>
        </sage>

        <p>
            Note that, it is required to explicitly specify the field when creating a
            vector. Sage infers teh field from the datatype of the vector components.
        </p>
        <sage>
            <input>
                # 3D vectors in the Integers field
                v1 = vector([1, 2, 3])

                # 3D vectors in the Rational Numbers field
                v2 = vector([1/2, 2/3, 3/5])

                # 3D vectors in the Reals field
                v3 = vector([1.2, 2.3, 3.5])

                print(v1, "is a vector in", v1.base_ring())
                print(v2, "is a vector in", v2.base_ring())
                print(v3, "is a vector in", v3.base_ring())
            </input>
        </sage>
    </subsection>

    <subsection xml:id="subsubsec-vector-arithmetic">
        <title>Vector Arithmetic</title>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Arithmetic</h>
            </idx>
            Vectors can be added and subtracted using the <c>+ and -</c> operators.
            The result of adding or subtracting two vectors is a new vector with the
            same number of components.
        </p>
        <sage>
            <input>
                v = vector([1, 2, 3])
                w = vector([4, 5, 6])

                # Adding vectors
                print(v + w)
            </input>
        </sage>
        <sage>
            <input>
                # Subtracting vectors
                print(v - w)
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Scalar Multiplication</h>
            </idx>
            A vector can be multiplied by a scalar using the <c>*</c> operator.
            The result is a new vector with each component multiplied by the scalar.
        </p>
        <sage>
            <input>
                scalar = 2
                print(scalar * v)
            </input>
        </sage>
    </subsection>

    <subsection xml:id="subsubsec-dot-and-cross-product">
        <title>Cross and Dot Products of Vectors</title>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Dot Product</h>
            </idx>
            The dot product of two vectors <m>v</m> and <m>w</m> is defined as the sum of the
            products of their corresponding components. The dot product is a scalar value and
            is calculated as <m>v \cdot w = v_1 w_1 + v_2 w_2 + ... + v_n w_n</m>. This is
            performed using the <c>dot_product</c> method in Sage.
        </p>
        <sage>
            <input>
                v = vector([1, 2, 3])
                w = vector([4, 5, 6])
                print(v.dot_product(w))  # Output: 32
            </input>
        </sage>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Cross Product</h>
            </idx>
            The cross product of two vectors <m>v</m> and <m>w</m> is a vector that is
            perpendicular to both <m>v</m> and <m>w</m>. The cross product is defined only
            in 3D space and is calculated using the determinant of a matrix formed by the
            unit vectors <m>i, j, k</m> and the components of the vectors <m>v</m> and <m>w</m>.
            In Sage, the cross product is calculated using the <c>cross_product</c> method.
        </p>
        <sage>
            <input>
                v = vector([1, 2, 3])
                w = vector([4, 5, 6])
                print(v.cross_product(w))
            </input>
        </sage>
    </subsection>

    <subsection xml:id="subsubsec-complex-vectors">
        <title>Conjugate of a Complex Vector</title>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Complex Conjugate</h>
            </idx>
            The complex conjugate of a vector is found by taking the conjugate of each of its components.
            Note the use of <c>i</c> as the the imaginary number in Sage.
        </p>
        <sage>
            <input>
                # Defining a complex vector
                v = vector([1 + 2*i, 3 - i])

                # Computing the complex conjugate
                v.conjugate()
            </input>
        </sage>
    </subsection>
</section>
