<section xml:id="sec-solving-systems-of-equations" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Solving Systems of Equations</title>
    <p>
        Sage allows for us to generalize the previous methods to solve systems of equations. 
        In order to do this we must first define multiple symbolic variables, 
        then we use the <c>solve</c> function as we did before.
    </p>
    <p>
        There are various ways to create multiple symbolic variables at once. The following are all valid.
    </p>
    <sage>
        <input>
            # Single string
            var('x y')

            # List of strings
            var(['x','y'])

            # Multiple strings
            var('x', 'y')
        </input>
        <output>

        </output>
    </sage>
    <p>
        Notice how these symbolic variables are all equivalent regardless of how they are created.
    </p>
    <sage>
        <input>
            var('x y') == var(['x','y']) == var('x', 'y')
        </input>
        <output>

        </output>
    </sage>
    <p>
        To solve a system of equations algebraically, 
        we first define the variables and the equations in the system.
    </p>
    <sage>
        <input>
            # Create symbolic variables
            var('x y')

            # Define the equations and store them in variables
            eq1 = 2*x + 3*y == 4
            eq2 = 5*x - 6*y == 7

            show(eq1)
            show(eq2)
        </input>
        <output>
        </output>
    </sage>
    <p>
        In this case, the first argument to <c>solve</c> is a list of equations and the following arguments are the variables being solved for.
    </p>
    <sage>
        <input>
            S = solve([eq1, eq2], x, y)
            S
        </input>
        <output>
        </output>
    </sage>
    <p>
        Observe that Sage returns a nested list structure. 
        The outer list contains all possible solutions to the system (in this case, there is only one solution). 
        Each solution is represented as an inner list of equations showing the value of each variable. 
    </p>
    <sage>
        <input>
            # Access the first (and only) solution
            S[0]
        </input>
        <output>
        </output>
    </sage>
    <sage>
        <input>
            # Access the x-value equation from the solution
            S[0][0]
        </input>
        <output>
        </output>
    </sage>
    <sage>
        <input>
            # Access the y-value equation from the solution
            S[0][1]
        </input>
        <output>
        </output>
    </sage>
    <p>
        Since each equation defines implicitly a function, we can use <c>implicit_plot</c> to graph each equation in 2D-space.
    </p>
    <sage>
        <input>
            p1 = implicit_plot(eq1, (x, -2, 5), (y, -4, 4), color='green')
            p2 = implicit_plot(eq2, (x, -2, 5), (y, -4, 4), color='red')
            p1+p2
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can also plot a point whose coordinates are the ones given in the solution.
    </p>
    <sage>
        <input>
            A = S[0][0].rhs()
            B = S[0][1].rhs()
            P = point((A, B))
            P
        </input>
        <output>

        </output>
    </sage>
    <p>
        Now the full plot with the equations, the solution, and a legend.
    </p>
    <sage>
        <input>
            PP = point((A, B), size=50, legend_label=f'Solution: ({A}, {B})')

            show(p1 + p2 + PP, axes=True)
        </input>
        <output>

        </output>
    </sage>
    <p>
        We also can solve a system of three equations with three variables.
    </p>
    <sage>
        <input>
            var('x y z')
            eq1 = x+y+z==6
            eq2 = 2*x-z==-1
            eq3 = x-y-z==-4
            solve([eq1,eq2,eq3],x,y,z)
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can plot the equations in 3D-space using <c>implicit_plot3d</c>.
    </p>
    <sage>
        <input>
            a = implicit_plot3d(eq1,(x,0,5), (y,0,5), (z,0,5))
            b = implicit_plot3d(eq2,(x,0,5), (y,0,5), (z,0,5))
            c = implicit_plot3d(eq3,(x,0,5), (y,0,5), (z,0,5))
            a + b + c
        </input>
        <output>

        </output>
    </sage>
    <p>
        Let's add some color to the plot so we can distinguish the equations.
    </p>
    <sage>
        <input>
            a = implicit_plot3d(eq1,(x,0,5), (y,0,5), (z,0,5), color='blue')
            b = implicit_plot3d(eq2,(x,0,5), (y,0,5), (z,0,5), color='red')
            c = implicit_plot3d(eq3,(x,0,5), (y,0,5), (z,0,5), color='green')
            a + b + c
        </input>
        <output>

        </output>
    </sage>
    <p>
        The following is an example of a system with infinitely many solutions. 
        The general solution is expressed as a parameterized function.
    </p>
    <sage>
        <input>
            var('x y z')
            eq1 = x + 2*y == 4
            eq2 = y - z == 0
            eq3 = x + 2*z == 4
            solve([eq1, eq2, eq3], x, y, z)
        </input>
        <output>

        </output>
    </sage>
    <p>
        The following is an example of an inconsistent system. 
        Since the system has no solutions, Sage returns an empty list.
    </p>
    <sage>
        <input>
            var('x y z')
            eq1 = x + 2*y == 4
            eq2 = x + 2*y == 1
            eq3 = x + 2*z == 4
            solve([eq1, eq2, eq3], x, y, z)
        </input>
        <output>
            
        </output>
    </sage>
</section>
