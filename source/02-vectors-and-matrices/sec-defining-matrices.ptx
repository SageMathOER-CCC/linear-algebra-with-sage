<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-defining-matrices"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Matrices</title>

    <introduction xml:id="sm-introduction-matrices-in-sage">
        <p>
            <idx>
                <h>Matrices</h>
            </idx>
            While 2D matrices may have intuitive geometric interpretations,
            higher-dimensional matrices should be used more abstractly. In this section,
            we will see how to define matrices, and perform basic operations on them.
        </p>

        <p>
            A matrix is an <m>m \times n</m> rectangular array of numbers, where <m>m</m>
            is the number of rows and <m>n</m> is the number of columns. A matrix in
            <m>R^{m \times n}</m> is an ordered array of numbers arranged in <m>m</m>
            rows and <m>n</m> columns, written as:
            <m>
                \begin{bmatrix}
                a_{11} &amp; a_{12} &amp; \dots &amp; a_{1n} \\
                a_{21} &amp; a_{22} &amp; \dots &amp; a_{2n} \\
                \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
                a_{m1} &amp; a_{m2} &amp; \dots &amp; a_{mn}
                \end{bmatrix}
            </m>
        </p>

        <p>
            Just like vectors, Sage does come with built-in support for matrices. A Matrix
            is defined as a grid of numbers, and can be defined using the <c>matrix</c> and
            passing the elements of the matrix as a list of lists (i.e. list of rows).
        </p>
        <sage>
            <input>
                # Creating a 3x3 matrix in the integer field
                M = matrix([
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9],
                ])

                M
            </input>
        </sage>

        <p>
            Alternatively, we can create a matrix by passing the elements as a list, and
            the dimensions as arguments to the <c>matrix</c> command.
        </p>
        <sage>
            <input>
                # Creating a 3x3 matrix using the matrix command
                M = matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])
                M
            </input>
        </sage>
        <p>
            Note that for 2D matrices, we don't need to specify the all
            dimensions of a matrix. Sage can infer the dimensions from
            the number of elements in the list.
        </p>
        <sage>
            <input>
                # Creating a 2x5 matrix using the matrix command
                M = matrix(2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
                M
                # The missing dimension is inferred from the number
                # of elements and the given dimension
            </input>
        </sage>

        <p>
            The matrix elements can also be defined programmatically using a list comprehension.
        </p>
        <sage>
            <input>
                # Creating a 3x3 matrix using list comprehension
                M = matrix(3, 3, [i + j for i in range(1, 4) for j in range(1, 4)])
                M
            </input>
        </sage>

        <p>
            A matrix with a single list of values creates a <em>vector-like</em> object,
            but it is NOT a vector (note the square brackets in matrices in lieu of the parenthesis).
        </p>
        <sage>
            <input>
                # creating a vector and single-row matrix
                v=vector([1, 2, 3])
                m=matrix([1, 2, 3])
                print("v=", v, "is of type", type(v))
                print("m=", m, "is of type", type(m))
                print("are v and m identical ?", v==m)
            </input>
        </sage>

        <p>
            A matrix in <m>R^{m \times n}</m> consists of <m>m</m> rows and <m>n</m> columns.
            The individual elements of a matrix can be accessed using the row and column indices.
        </p>
        <sage>
            <input>
                # Accessing matrix elements
                print(M)
                a_12 = M[0, 1]  # Element at first row, second column
                print("Element at (1,2):", a_12)
            </input>
        </sage>

        <!-- Should we also define the rank of a Matrix and .rank() method here ? may be not as it implies linear-independence -->
        <p>
            The <em>size</em> of a matrix is defined as the number of rows and columns in the matrix.
            To get the dimensions of a matrix, we can use the <c>dimensions</c> method.
        </p>
        <sage>
            <input>
                # Size of matrix
                M.dimensions()
            </input>
        </sage>

        <p>
            For 2D matrices, to get the number of rows or columns, we can use <c>nrows()</c> and <c>ncols</c> Sage methods.
        </p>
        <sage>
            <input>
                print("Matrix M has", M.nrows(), "rows and", M.ncols(), "columns")
            </input>
        </sage>
    </introduction>
</section>
