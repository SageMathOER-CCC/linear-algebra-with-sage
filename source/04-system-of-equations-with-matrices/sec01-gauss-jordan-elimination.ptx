<section xml:id="sec-gauss-jordan-elimination" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Gauss-Jordan Elimination</title>
    <p>
        We can also solve a system of linear equations using matrices. 
        First, construct the augmented matrix by extracting the coefficients of the variables and placing the constants from the right-hand side of the equations as the last column. 
        Then, perform elementary row operations to reduce this augmented matrix to <term>reduced row echelon form</term> (RREF). 
        Finally, convert the matrix back into a system of equations to explicitly display the solutions.
    <p>
        A matrix is in <term>reduced row echelon form</term> if:
        <ul>
            <li>
                <p>
                    The first nonzero number in the row is a leading <m>1</m>.
                </p>
            </li>
            <li>
                <p>
                    In any two consecutive rows that do not consist entirely of zeros, the leading <m>1</m> in the lower row occurs farther to the right than the leading <m>1</m> in the higher row.
                </p>
            </li>
            <li>
                <p>
                    Rows that consist entirely of zeros are at the bottom of the matrix.
                </p>
            </li>
            <li>
                <p>
                    Each column that contains a leading <m>1</m> has zeros everywhere else in that column.
                </p>
            </li>
        </ul>
    </p>
    </p>
    <p>
        The following are examples of methods that preform an elementary row operation on a matrix. 
        Keep in mind that all of the following methods use zero-based indexing.
    </p>
        <p>
            The <c>add_multiple_of_row(i, j, s)</c> method preforms an elementary row operation on a matrix by adding <m>s</m> times row <m>j</m> to row <m>i</m>. 
        </p>
        <p>
            The <c>swap_rows(r1, r2)</c> method also preforms an elementary row operation on a matrix by swapping rows <c>r1</c> and <c>r2</c>. 
        </p>
        <p>
            The <c>rescale_row(i,s)</c> method preforms an elementary row operation by 
            multiplying row <m>i</m> by <m>s</m> in place.
        </p>
        <p>
            In the following sections, we will use Sage to solve <m>\textbf{Case I}</m> with an augmented matrix.
            Here is <m>\textbf{Case I}</m> restated:
        </p>
        <md>
            <mrow>
            \begin{array}{c}
            y - z = 0\\
            x + 2y = 4\\
            x + z = 4
            \end{array}
            </mrow>
        </md>
        <section xml:id="sec-augmented-matrix">
        <title>Augmented Matrix</title>
        <p>
            First, we create the <term>augmented matrix</term> for the system of equations. 
            Each row in the augmented matrix lists the coefficients of the variables in an equation. 
            While we do not directly manipulate the variables themselves, they indicate the position of each coefficient. 
            The last column of the augmented matrix contains the constants from the right-hand side of each equation.
        </p>
        <md>
        <mrow>
            \left[\begin{array}{ccc|c}
            0 \amp 1 \amp -1 \amp 0 \\
            1 \amp 2 \amp 0 \amp 4 \\
            1 \amp 0 \amp 1 \amp 4
            \end{array}\right]
        </mrow>
        </md>
        <p>
            Let's define the coefficient matrix, 
            consisting of the coefficients extracted from the system of equations where each column corresponds to a variable:
        </p>
        <sage>
            <input>
                A = matrix([
                    [0, 1, -1],
                    [1, 2, 0],
                    [1, 0, 1]
                ])
                A
            </input>
            <output>

            </output>
        </sage>
        <p>
            Let's define the constants vector:
        </p>
        <sage>
            <input>
                b = vector([0, 4, 4])  # Right-hand side of the equations
                b
            </input>
            <output>

            </output>
        </sage>
        <p>
            Next, create the augmented matrix by passing the constants vector to the <c>augment()</c> method of the coefficient matrix.
        </p>
        <sage>
            <input>
                Ab = A.augment(b)
                Ab
            </input>
            <output>

            </output>
        </sage>
        <p>
            Alternatively, we can create the augmented matrix directly by passing a list of lists to the matrix function.
        </p>
        <sage>
            <input>
                Ab = matrix([
                        [0, 1, -1, 0], # y - z  = 0
                        [1, 2, 0, 4],  # x + 2y = 4
                        [1, 0, 1, 4]   # x + 2z = 4
                    ])
                Ab
            </input>
            <output>
            </output>
        </sage>
        </section>
        <section xml:id="sec-rref">
            <title>RREF</title>
        <p>
            First, we will move the leading <m>1</m> from the second row to the first row.
        </p>
        <sage>
            <input>
                Ab.swap_rows(0,1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            The next step is to multiply the first row by <m>-1</m> and add it to the third row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(2, 0, -1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Next, multiple the second row by <m>2</m> and add it to the third row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(2, 1, 2)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Multiply the third row by <m>-1</m> and add it to the second row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(1, 2, -1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Multiply the second row by <m>-2</m> and add it to the first row.
        </p>
        <sage>
            <input>
                Ab.add_multiple_of_row(0, 1, -2)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Multiply the third row in place by <m>-1</m>.
        </p>
        <sage>
            <input>
                Ab.rescale_row(2,-1)
                Ab
            </input>
            <output>
            </output>
        </sage>
        <p>
            Notice that this matrix satisfies the definition of reduced row echelon form.
            Now that we have the matrix in reduced echelon form, 
            we can convert the matrix back into a system of equations:
        <md>
        <mrow>
            \begin{array}{c}
            x = 4 \\
            y = 0 \\
            z = 0 
            \end{array}
        </mrow>
        </md>
        </p>
        <p>
        Alternatively, Sage has a built in method to do all of this for us. 
        The <c>rref()</c> method returns the reduced row echelon Form of a matrix.
        </p>
        <sage>
            <input>
                Ab = matrix([ # Re-use our old augmented matrix
                        [0, 1, -1, 0],
                        [1, 2, 0, 4],
                        [1, 0, 1, 4] 
                    ])
                Ab.rref()
            </input>
            <output>
            </output>
        </sage>
    <p>
        Here is an example of <c>rref()</c> on <m>\textbf{Case II}</m>, with infinitely many solutions.
    </p>
    <sage>
        <input>
            M = matrix([
                    [1, 2, 0, 4],
                    [0, 1, -1, 0],
                    [1, 0, 2, 4]
                ])
            M.rref()
        </input>
        <output>
            
        </output>
    </sage>
    <p>
        Here is <c>rref()</c> on <m>\textbf{Case III}</m>, with no solutions:
    </p>
    <sage>
        <input>
            T = matrix([
                    [1, 2, 0, 4],
                    [1, 2, 0, 1],
                    [1, 0, 2, 4]
                ])
            T.rref()
        </input>
        <output>
            
        </output>
    </sage>
    </section>
</section>
