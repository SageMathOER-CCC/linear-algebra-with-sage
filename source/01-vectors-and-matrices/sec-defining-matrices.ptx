<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-defining-matrices" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Working with Matrices in SageMath</title>

    <introduction>
        <idx><h>Matrices</h></idx>
        <p>
            A matrix is an <m>m \times n</m> rectangular array of numbers:
        </p>
        <p>
            <me>
                \begin{bmatrix}
                a_{11} &amp; a_{12} &amp; \dots &amp; a_{1n} \\
                a_{21} &amp; a_{22} &amp; \dots &amp; a_{2n} \\
                \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
                a_{m1} &amp; a_{m2} &amp; \dots &amp; a_{mn}
                \end{bmatrix}
            </me>
        </p>
        <p>
            where <m>m</m> is the number of rows and <m>n</m> is the number of columns. 
            Each <em>entry</em> <m>a_{ij}, i=1\dots m, j=1\dots n,</m> corresponds 
            to the value at the intersection of the <m>i</m>-th row and <m>j</m>-th column.
        </p>
       
        <p><strong>In this section you will learn:</strong></p>
        <ul>
            <li>How to create matrices of different sizes</li>
            <li>How to access specific elements in a matrix</li>
            <li>How to find matrix dimensions and properties</li>
            <li>How to work with matrix rows and columns</li>
            <li>How to create matrices with different number types</li>
        </ul>
    </introduction>

    <subsection>
        <title>Creating Matrices</title>
        <p>
            Creating a matrix in SageMath is straightforward. You use the <c>matrix()</c> function 
            and provide lists of numbers for each row.
        </p>
        <sage>
            <input>
                # Create a 3x4 matrix (3 rows, 4 columns)
                M = matrix([
                    [11, 13, 17, 19],
                    [23, 29, 31, 37],
                    [41, 43, 47, 53]
                ])
                M
            </input>
        </sage>

        <p>You can also create a matrix from vectors:</p>
        <sage>
            <input>
                # Create vectors first
                v1 = vector([11, 13, 17, 19])
                v2 = vector([23, 29, 31, 37])
                v3 = vector([41, 43, 47, 53])

                # Create a matrix from these vectors
                M = matrix([v1, v2, v3])
                M
            </input>
        </sage>

        <p>
            Another way is to specify the number of rows, columns, and entries:
        </p>
        <sage>
            <input>
                # Create a 2x3 matrix by specifying dimensions and entries
                M = matrix(2, 3, [11, 22, 33, 44, 55, 66])
                M
            </input>
        </sage>

        <p>
            Sage can also infer the missing dimension from the number of entries:
        </p>
        <sage>
            <input>
                # A 5x20 matrix with the first 100 integers
                M = matrix(5, list(range(100)))
                M
            </input>
        </sage>

        <p>
            Entries can also be generated programmatically using list comprehensions:
        </p>
        <sage>
            <input>
                M = matrix(2, 5, [j + i * 5 for i in range(2) for j in range(5)])
                M
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Accessing Matrix Elements</title>
        <p>
            Access individual entries using row and column indices (0-based indexing):
        </p>
        <sage>
            <input>
                a_23 = M[1, 2]   # Second row, third column
                a_23
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Working with Rows and Columns</title>
        <p>
            SageMath provides helpful methods for rows, columns, and diagonals:
        </p>
        <sage>
            <input>
                M.rows()       # Get all rows
                M.columns()    # Get all columns
                M.row(1)       # Get 2nd row
                M.column(2)    # Get 3rd column
                M.diagonal()   # Get main diagonal
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Matrix Dimensions</title>
        <sage>
            <input>
                M.nrows()       # Number of rows
                M.ncols()       # Number of columns
                M.dimensions()  # Both dimensions
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Vectors vs. Matrices</title>
        <p>
            A single list of numbers creates a vector-like object, but it is NOT a vector.
        </p>
        <sage>
            <input>
                v = vector([1, 2, 3])
                v
            </input>
        </sage>
        <sage>
            <input>
                m = matrix([1, 2, 3])
                m
            </input>
        </sage>
        <p>
            Compare their types:
        </p>
        <sage>
            <input>
                print("v is of type", type(v))
                print("m is of type", type(m))
                print("Are v and m identical?", v == m)
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Specifying Number Types</title>
        <p>
            Matrices can use different number systems. Sage can infer the field automatically or you can specify it.
        </p>
        <sage>
            <input>
                # Integer matrix
                m_int = matrix(ZZ, [
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]
                ])
                m_int
            </input>
        </sage>
        <sage>
            <input>
                m_int.base_ring()  # Check number type
            </input>
        </sage>
        <p>
            Supported number systems:
        </p>
        <ul>
            <li><c>ZZ</c> - Integers</li>
            <li><c>QQ</c> - Rational numbers</li>
            <li><c>RR</c> - Real numbers</li>
            <li><c>CC</c> - Complex numbers</li>
        </ul>
    </subsection>

    <subsection>
        <title>Creating Matrices with Patterns</title>
        <p>
            You can create matrices using patterns and list comprehensions:
        </p>
        <sage>
            <input>
                M = matrix(3, 4, [i + j for i in range(3) for j in range(4)])
                M
            </input>
        </sage>
    </subsection>

    <subsection>
        <title>Putting It All Together</title>
        <p>
            A complete example combining several concepts:
        </p>
        <sage>
            <input>
                # Create a 3x4 matrix
                M = matrix([
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12]
                ])
                print("Matrix:")
                print(M)
                print("\nDimensions:", M.dimensions())  # blank line before next output
                print("\nElement at row 1, column 2:", M[1, 2])
                print("\nSecond row:", M.row(1))
                print("\nThird column:", M.column(2))
                print("\nMain diagonal:", M.diagonal())

                # Create a 2x3 rational matrix
                M_rational = matrix(QQ, [
                    [1/2, 2/3, 3/4],
                    [4/5, 5/6, 6/7]
                ])
                print("\nRational matrix:")
                print(M_rational)
                print("\nNumber type:", M_rational.base_ring())
            </input>

        </sage>
    </subsection>


</section>
