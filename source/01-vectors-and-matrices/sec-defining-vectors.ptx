<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-defining-vectors"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Vectors</title>

    <introduction xml:id="sm-introduction-vectors-in-sage">
        <p>
            <idx>
                <h>Vectors</h>
            </idx>
            In this section, we will see how to define vectors, and perform basic operations on them.
        </p>

        <p>
            Sage provides built-in support for vectors. In Sage, vectors are represented as <m>n</m>-tuples,
            <m>(v_1, v_2, ..., v_n) \in R^n</m> where <m>n</m> is the number of <em>components</em> in the vector.
            Vectors can be defined using <c>vector</c> command, and passing the values of the vectors components.
        </p>
        <sage>
            <input>
                v=vector([1, 2, 3])
                v
            </input>
        </sage>

        <p>
            The number of components <m>n</m> of a vector <m>v = (v_1, \dots, v_n)</m> is
            obtained in Sage by using the command <c>degree</c>.
        </p>
        <sage>
            <input>
                v.degree()
            </input>
        </sage>

        <p>
            To retrieve the components of a vector as a list, the method <c>list</c> can be used
        </p>
        <sage>
            <input>
                v.list()
            </input>
        </sage>
        <p>
            Note that the return type of that command is the Python built-in <c>List</c> type; an
            ordered list of numbers where the order matters. As such, any and all native list methods
            can be used on the returned value.
        </p>
        <p>
            Recall that lists in Sage are 0-indexed, meaning that the first element of the list is at
            index 0. To access a specific component of a vector, we can use vector indexing method. Here how
            to access the first component of the vector <m>v</m>.
        </p>
        <sage>
            <input>
                v[0]
            </input>
        </sage>

        <p> The magnitude of a vector, <m>||v|| = \sqrt{v_1^2 + v_2^2 + ... + v_n^2}</m> is obtained
            in Sage by using the vector method <c>norm</c>.
        </p>
        <sage>
            <input>
                v.norm()
            </input>
        </sage>

        <p>
            A vector in <m>R^{n+1}</m> can be constructed from a vector in <m>R^n</m> by appending
            the values for the additional components.
        </p>
        <sage>
            <input>
                vector(v.list() + [4])
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Field</h>
            </idx>
            Vectors in Sage can be created in different <em>fields</em> based on the datatype of the
            components of the vector. While working in a specific field, we need to explicitly pass
            the field when instantiating a vector using the <c>vector</c> command.
        </p>
        <sage>
            <input>
                # creating 3D vectors in Integers field
                u = vector(ZZ, v)
                u
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Ring</h>
            </idx>
            Note that <m>ZZ</m> is Sage notation for the Integers field. Similarly, <m>QQ</m> is for
            Rational numbers, <m>RR</m> for Reals, and <m>CC</m> for Complex numbers. The method
            <c>base_ring</c> returns the <em>base ring</em> of the vector.
        </p>
        <sage>
            <input>
                u.base_ring()
            </input>
        </sage>

        <p>
            If the field is omitted, Sage will infer the field from the datatype of the vector components.
        </p>
        <sage>
            <input>
                w = vector([1/2, 2/3, 3/5])
                w.base_ring()
            </input>
        </sage>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Complex</h>
            </idx>
            Sage also supports vectors over the complex field <m>CC</m>. While such vectors are not commonly
            encountered in elementary linear algebra, they play an essential role in many engineering applications.
            For instance, in signal processing, orthogonal signals are frequently expressed as complex vectors,
            enabling the use of a single transformation matrix to act on the entire set, rather than applying the
            transformation to each signal individually.
        </p>
        <p>
            To create a vector in the complex field, we can either explicitly specify the field as <m>CC</m>,
            or implicitly by using complex numbers as components of the vector like below.
        </p>
        <sage>
            <input>
                z=vector([1.2 + i * 2.3, 3.5 - i * 5.7])
                z.base_ring()
            </input>
        </sage>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Complex Conjugate</h>
            </idx>
            In Sage, the complex conjugate of a vector is found by calling the <c>conjugate()</c> method on the vector itself.
        </p>
        <sage>
            <input>
                z.conjugate()
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Visual Representation</h>
            </idx>
            In low dimensions (<m>n \leq 3</m>), the geometrical representation of a vector can be visualized
            as an arrow starting from the origin to the point <m>P=(v_1, v_2, ..., v_n)</m>. Although Sage accepts
            vectors of any dimension, the visual representation is only possible and meaningful in 2D and 3D, and
            high dimensional vectors are to be taken as abstract objects.
        </p>
        <p>
            To display a vector in Sage, we can use the internal method <c>plot</c> of <em>vector</em> class.
        </p>
        <sage>
            <input>
                u.plot(color='red', thickness=2)
            </input>
        </sage>

        <p>
            Note that we can also obtain the same visual representation using Sage default <c>plot</c> method.
        </p>
        <sage>
            <input>
                plot(u, color='red', thickness=2)
            </input>
        </sage>
    </introduction>
</section>
