<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-defining-vectors"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Vectors</title>

    <introduction xml:id="sm-introduction-vectors-in-sage">
        <p>
            <idx>
                <h>Vectors</h>
            </idx>
            In this section, we will see how to define vectors, and perform basic operations on them.
        </p>

        <p>
            Sage provides built-in support for vectors. In Sage, vectors are represented as <m>n</m>-tuples,
            <m>(v_1, v_2, ..., v_n) \in R^n</m> where <m>n</m> is the number of <em>components</em> in the vector.
            Vectors can be defined using <c>vector</c> command, and passing the values of the vectors components.
        </p>
        <sage>
            <input>
                vector([10, 20, 30])
            </input>
        </sage>

        <p>
            The number of components <m>n</m> of a vector <m>v = (v_1, \dots, v_n)</m> is
            obtained in Sage by using the command <c>degree</c>.
        </p>
        <sage>
            <input>
                v = vector([11, 22, 33])
                v.degree()
            </input>
        </sage>

        <p>
            To retrieve the components of a vector as a list, the method <c>list</c> can be used
        </p>
        <sage>
            <input>
                components = v.list()
                components
            </input>
        </sage>
        <p>
            Note that the return type of that command is the Python built-in <c>List</c> type; an
            ordered list of numbers where the order matters. As such, any and all native list methods
            can be used on the returned value.
        </p>
        <sage>
            <input>
                type(components)
            </input>
        </sage>

        <p>
            Recall that lists in Sage are 0-indexed, meaning that the first element of the list is at
            index 0. To access a specific component of a vector, we can use vector indexing method.
        </p>
        <sage>
            <input>
                first_component = v[0]
                first_component
            </input>
        </sage>

        <p> The magnitude of a vector, <m>||v|| = \sqrt{v_1^2 + v_2^2 + ... + v_n^2}</m> is obtained
            in Sage by using the vector method <c>norm</c>.
        </p>
        <sage>
            <input>
                v.norm()
            </input>
        </sage>

        <p>
            A vector in <m>R^{n+1}</m> can be constructed from a vector in <m>R^n</m> by appending
            the values for the additional components.
        </p>
        <sage>
            <input>
                vector(v.list() + [44])
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Field</h>
            </idx>
            Vectors in Sage can be created in different <em>fields</em> based on the datatype of the
            components of the vector. While working in a specific field, we need to explicitly pass
            the field when instantiating a vector using the <c>vector</c> command.
        </p>
        <sage>
            <input>
                # creating 3D vectors in Integers field
                v_int = vector(ZZ, components)
                v_int
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Ring</h>
            </idx>
            Note that <m>ZZ</m> is Sage notation for the Integers field. Similarly, <m>QQ</m> is for
            Rational numbers, <m>RR</m> for Reals, and <m>CC</m> for Complex numbers. The method
            <c>base_ring</c> returns the <em>base ring</em> of the vector.
        </p>
        <sage>
            <input>
                v_int.base_ring()
            </input>
        </sage>

        <p>
            If the field is omitted, Sage will infer the field from the datatype of the vector components.
        </p>
        <sage>
            <input>
                v_rat = vector([1/2, 2/3, 3/5])
                v_rat.base_ring()
            </input>
        </sage>
        <p>
            <idx>
                <h>Vectors</h>
                <h>Complex</h>
            </idx>
            For the complex field <m>CC</m>, Sage use <m>i</m> to represent the imaginary unit number.
        </p>
        <sage>
            <input>
                v_cplx = vector([1.2 + i * 2.3, 3.5 - i * 5.7])
                v_cplx.base_ring()
            </input>
        </sage>

        <p>
            <idx>
                <h>Vectors</h>
                <h>Visual Representation</h>
            </idx>
            The geometrical representation of a vector can be visualized as an arrow starting from the origin
            to the point <m>P=(v_1, v_2, ..., v_n)</m>. In lower dimensions (<m>n \leq 3</m>), the geometric
            representation is intuitive, but not so much in higher dimensions, where we should focus on abstract
            concepts rather than geometric representation.
        </p>
        <p>
            To display a vector in Sage, we can use the internal method <c>plot</c> of <em>vector</em> class.
        </p>
        <sage>
            <input>
                v.plot(color='red', thickness=25)
            </input>
        </sage>

        <p>
            We can also obtain the same visual representation using Sage default <c>plot</c> method.
        </p>
        <sage>
            <input>
                plot(v, color='red', thickness=25)
            </input>
        </sage>
    </introduction>
</section>
