<section xml:id="sec-solving-equations" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Solving Equations</title>
    <p>
         The <c>solve</c> function algebraically solves an equation, system of equations, or inequality. Let's solve for <m>x</m> in the equation <m>8 + x = 5</m>.
    </p>
    <sage>
        <input>
            solve(8 + x == 5, x)
        </input>
        <output>

        </output>
    </sage>
    <p>
        To use a variable other than <c>x</c>, we need to create a <term>symbolic</term> variable object with the <c>var()</c> function. Otherwise, Sage will not recognize the variable as a symbolic variable.
    </p>
    <sage>
        <input>
        # Create a symbolic variable
        var('z')

        # Solve for z
        solve(8 + z == 5, z)
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can store the equation in a new variable and perform operations on it. Recall the single equal sign is used for assignment, while the double equal sign is used for comparison.
    </p>
    <sage>
        <input>
            # Define the equation and store it in a variable
            E = 8 + x == 5

            # Solve the equation for x
            solve(E, x)
        </input>
        <output>

        </output>
    </sage>
    <p>
        Be mindful of defining equations and storing variables. The following may not work as you may expect.
    </p>
    <sage>
        <input>
            E = 8 + x
            E == 5
            solve(E, x)
        </input>
        <output>

        </output>
    </sage>
    <p>
        In the above example, <c>solve(E, x)</c> returns <c>[x == -8]</c> instead of <c>[x == -3]</c>.
    </p>
    <ol>
        <li>
            <p>
                <c>E = 8 + x</c> defines <c>E</c> as an algebraic expression, not an equation.
            </p>
        </li>
        <li>
            <p>
                <c>E == 5</c> creates a comparison that evaluates to <c>True</c> or <c>False</c>. However, this result isn't stored or used.
            </p>
        </li>
        <li>
            <p>
                When we call <c>solve(E, x)</c> without an equality, Sage implicitly solves <c>8 + x == 0</c>, giving us <c>x = -8</c>.
            </p>
        </li>
    </ol>
    <p>
        Sage offers flexibility in defining equations. We can solve for the intended equation by placing the equality operator <c>==</c> as an argument in the <c>solve()</c> function.
    </p>
    <sage>
        <input>
            E = 8 + x
            solve(E == 5, x)
        </input>
        <output>

        </output>
    </sage>
    <p>
        Observe that the solution of a equation is given between square brackets, indicating that the datatype is a list. We can access the solution by <term>indexing</term> the list with square brackets. Notice that after accessing the solution, the brackets are no longer present.
    </p>
    <sage>
        <input>
        # Define the equation and store it in a variable
        E = 8 + x == 5

        # Store the solution in a variable
        S = solve(E, x)

        # Index the zero-th element of the list
        # In this case the list has only one element.
        # However, other equations may have multiple solutions and therefore multiple elements in the list.
        S[0]
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can also access each side of the equation. Here is the right-hand side of the equation.
    </p>
    <sage>
        <input>
            E.rhs()
        </input>
        <output>

        </output>
    </sage>
    <p>
        Here is the left-hand side of the equation.
    </p>
    <sage>
        <input>
            E.lhs()
        </input>
        <output>

        </output>
    </sage>
    <p>
        There are various ways to create multiple symbolic variables at once. The following are all valid.
    </p>
    <sage>
        <input>
            # Single string
            var('x y')

            # List of strings
            var(['x','y'])

            # Multiple strings
            var('x', 'y')
        </input>
        <output>

        </output>
    </sage>
    <p>
        Notice how these symbolic variables are all equivalent regardless of how they are created.
    </p>
    <sage>
        <input>
            var('x y') == var(['x','y']) == var('x', 'y')
        </input>
        <output>

        </output>
    </sage>
    <p>
        Now let's define a system of equations.
    </p>
    <sage>
        <input>
            # Create symbolic variables
            var('x y')

            # Define the equations and store them in variables
            eq1 = 2*x + 3*y == 4
            eq2 = 5*x - 6*y == 7

            show(eq1)
            show(eq2)
        </input>
        <output>
        </output>
    </sage>
    <p>
        In this case, the first argument to <c>solve</c> is a list of equations. Next, we specify the variables to solve for.
    </p>
    <sage>
        <input>
            S = solve([eq1, eq2], x, y)
            S
        </input>
        <output>
        </output>
    </sage>
    <p>
        Observe that Sage returns a nested list structure. The outer list contains all possible solutions to the system (in this case, there is only one solution). Each solution is represented as an inner list of equations showing the value of each variable.
    </p>
    <sage>
        <input>
            # Access the first (and only) solution
            S[0]
        </input>
        <output>
        </output>
    </sage>
    <sage>
        <input>
            # Access the x-value equation from the solution
            S[0][0]
        </input>
        <output>
        </output>
    </sage>
    <sage>
        <input>
            # Access the y-value equation from the solution
            S[0][1]
        </input>
        <output>
        </output>
    </sage>
    <p>
        Since we defined the functions implicitly, we can use <c>implicit_plot</c> to graph each equation in 2D-space.
    </p>
    <sage>
        <input>
            p1 = implicit_plot(eq1, (x, -2, 5), (y, -4, 4), color='green')
            p2 = implicit_plot(eq2, (x, -2, 5), (y, -4, 4), color='red')
            p1+p2
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can also plot the solution to the system of equations as the point where the two lines intersect.
    </p>
    <sage>
        <input>
            A = S[0][0].rhs()
            B = S[0][1].rhs()
            P = point((A, B))
            P
        </input>
        <output>

        </output>
    </sage>
    <p>
        Now the full plot with the equations, the solution, and a legend.
    </p>
    <sage>
        <input>
            PP = point((A, B), size=50, legend_label=f'Solution: ({A}, {B})')

            show(p1 + p2 + PP, axes=True)
        </input>
        <output>

        </output>
    </sage>

    <p>
        We can solve a system of three equations with three variables.
    </p>
    <sage>
        <input>
            var('x y z')
            eq1 = x+y+z==6
            eq2 = 2*x-z==-1
            eq3 = x-y-z==-4
            solve([eq1,eq2,eq3],x,y,z)
        </input>
        <output>

        </output>
    </sage>
    <p>
        We can plot the equations in 3D-space using <c>implicit_plot3d</c>.
    </p>
    <sage>
        <input>
            a = implicit_plot3d(eq1,(x,0,5), (y,0,5), (z,0,5))
            b = implicit_plot3d(eq2,(x,0,5), (y,0,5), (z,0,5))
            c = implicit_plot3d(eq3,(x,0,5), (y,0,5), (z,0,5))
            a + b + c
        </input>
        <output>

        </output>
    </sage>
    <p>
        Let's add some color to the plot so we can distinguish the equations.
    </p>
    <sage>
        <input>
            a = implicit_plot3d(eq1,(x,0,5), (y,0,5), (z,0,5), color='blue')
            b = implicit_plot3d(eq2,(x,0,5), (y,0,5), (z,0,5), color='red')
            c = implicit_plot3d(eq3,(x,0,5), (y,0,5), (z,0,5), color='green')
            a + b + c
        </input>
        <output>

        </output>
    </sage>
    <p>
        As an introduction to solving equations in Sage, we worked with equations symbolically. Now, we will update our examples by using vectors and matrices. Returning to the system of of two equations, <m>2x + 3y = 4</m> and <m>5x - 6y = 7</m>, we can define a matrix and a vector to represent the system.
    </p>
    <sage>
        <input>
            A = matrix([
                    [2, 3], # 2*x + 3*y
                    [5, -6] # 5*x - 6*y
                ])
            b = vector([4, 7])
            A.solve_right(b)
        </input>
        <output>
            
        </output>
    </sage>
    <p>
        Returning to the system of three equations, <m>x + y + z = 6</m>, <m>2x - z = -1</m>, and <m>x - y - z = -4</m>, we can define a matrix and a vector to represent the system.
    </p>
    <sage>
        <input>
            A = matrix([
                    [1, 1, 1], # x + y + z
                    [2, 0, -1], # 2*x - z
                    [1, -1, -1] # x - y - z
                ])

            b = vector([6, -1, -4]) # Right-hand side
            A.solve_right(b)
        </input>
        <output>
            
        </output>
    </sage>
</section>
