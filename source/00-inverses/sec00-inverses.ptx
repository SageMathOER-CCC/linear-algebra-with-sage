<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-inverses-of-matrices" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Inverses of Matrices</title>

    <p>
        The inverse of a matrix <m>A</m> is denoted as <m>A^{-1}</m> and is defined as the matrix that, when multiplied with <m>A</m>, yields the identity matrix.
        The inverse exists only if the determinant of the matrix is non-zero.
    </p>

    <p>
        The inverse of a matrix has several important properties:
        <ul>
            <li>
                The inverse of the identity matrix is itself: <m>I^{-1} = I</m>.
            </li>

            <li>
                The inverse of a product of matrices is the product of their inverses in reverse order: <m>(AB)^{-1} = B^{-1}A^{-1}</m>.
            </li>

            <li>
                The inverse of a transpose is the transpose of the inverse: <m>(A^T)^{-1} = (A^{-1})^T</m>.
            </li>

            <li>
                The inverse of an inverse returns the original matrix: <m>(A^{-1})^{-1} = A</m>.
            </li>
        </ul>
    </p>

    <p>
        In Sage, the inverse of a matrix can be computed using the <c>inverse</c> method:
    </p>
    <sage>
    <input>
        A = matrix([
            [4, 0, 0], 
            [1, 1, 7], 
            [0, 9, 3]
        ])
        A.inverse()
    </input>
    </sage>
    <p>
        Exponent notation also produces the same effect.
    </p>
    <sage>
        <input>
            A^-1 
        </input>
    </sage>
    <subsection xml:id="subsec-minors-cofactors-and-adjugate-for-inverse">
        <title>Minors, Cofactors and the Adjugate Matrix</title>
        <p>
            <idx>
                <h>Matrices</h>
                <h>Adjugate</h>
                <h>Cofactor</h>
            </idx>
            The <em>adjugate</em> of a matrix <m>A</m> is the transpose of its cofactor matrix <m>C</m>:
            <m>adj(A)=C^T</m>. In Sage, the <c>adjugate</c> method returns the adjugate matrix.
        </p>
        <sage>
            <input>
                A.adjugate()
            </input>
        </sage>
        <p>
            Currently, Sage does not have an implementation to directly extract the <em>minors</em> of a matrix.
            To compute a minor <m>M_{ij}</m> of a matrix <m>A</m>, Sage offers <c>delete_rows()</c> and <c>delete_columns()</c>
            methods which can be used to delete a specific row <m>i</m> and column <m>j </m> and obtain a submatrix whose
            determinant yields a minor <m>M_{ij}</m>, which then can be used to compute the <em>cofactor</em>
            <m>c_{ij}=(-1)^{i+j}M_{ij}</m>.
        </p>
        <sage>
            <input>
                # By Removing first row and second column
                minor_1_2 = det(A.delete_rows([0]).delete_columns([1]))
                print("m_12:", minor_1_2)

                # Cofactor c_12
                cofactor_1_2=(-1)^(1+2) * minor_1_2
                print("c_12:", cofactor_1_2)
            </input>
        </sage>
        <p>
            Generally, given a square matrix of order <m>n \times n</m>, the cofactors are obtained by varying the row and column
            indices <m>i</m> and <m>j</m> from <m>1</m> to <m>n</m>. These computed cofactors constitute the entries of
            the cofactor matrix <m>C = \big[c_{ij}\big]</m>.
        </p>
        <sage>
            <input>
                n = A.nrows()

                # Cofactor matrix
                C = matrix([
                    [(-1)^(i + j) * det(A.delete_rows([i - 1]).delete_columns([j - 1])) for j in range(1, n + 1)]
                    for i in range(1, n + 1)
                ])
                C
            </input>
        </sage>
        <p>
            Note that the transpose of the cofactor matrix is the adjugate matrix
        </p>
        <sage>
            <input>
                A.adjugate() == C.transpose()
            </input>
        </sage>
        <p>
            The Adjugate matrix can then be used to compute the inverse of a non-singular matrix using the formula:
            <m>A^{-1} = \frac{1}{\det(A)} \cdot \text{adj}(A)</m>.
        </p>
        <sage>
            <input>
                A.inverse() == A.adjugate() / A.det()
            </input>
        </sage>
        <p>
            Note that the although methods <c>minor()</c> and <c>cofactor()</c> are currently not implemented in
            Sage, leveraging the command <c>adj</c> can help compute them, like shown below.
        </p>
        <sage>
            <input>
                cof = A.adjugate().transpose()

                # Cofactor c_12
                cofactor_1_2 = cof[0, 1]
                print("c_12:", cofactor_1_2)

                # Minor M_12
                minor_1_2 = cofactor_1_2 / ((-1)^(1 + 2))
                print("m_12:", minor_1_2)
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-row-reduction">
        <title>Row Reduction</title>
        <p>
            Row reduction can also be used to produce the inverse of a matrix.
            First we must augment the original matrix with the identity matrix.
        </p>
        <sage>
            <input>
                AI = A.augment(identity_matrix(3))
                AI
            </input>
            <output>
                
            </output>
        </sage>
        <p>
            Then by invoking <c>rref</c> the right sub-matrix is now the inverse.
        </p>
        <sage>
            <input>
                rrefAI = AI.rref()
                rrefAI
            </input>
        </sage>
        <p>
            To select for the inverse matrix we can use the <c>submatrix</c> method to return the inverse alone.
        </p>
        <sage>
            <input>
                A.inverse() == rrefAI.submatrix(0,3)
            </input>
        </sage>
    </subsection>
    <subsection xml:id="subsec-compare-methods">
        <title>Compare Methods</title>
        <p>
            These methods can have diffrent 
            Let's see what happens with a matrix that is not invertible.
        </p>
        <sage>
            <input>
                M = matrix([
                    [7, 7, 1],
                    [2, 7, 1],
                    [5, 7, 1]
                ])
                M.det()
            </input>
            <output>
                
            </output>
        </sage>
        <p>
            In the case of a matrix that is not invertible, the <c>inverse</c> method will throw an error.
        </p>
        <sage>
            <input>
                try:
                    M.inverse()
                except Exception as e:
                    print(e)
            </input>
        </sage>
        <p>
            Using the <c>adjugate</c> method and dividing by the determinate will also yield an error.
        </p>
        <sage>
            <input>
                try:
                    M.inverse() == M.adjugate() / M.det()
                except Exception as e:
                    print(e)
            </input>
        </sage>
        <p>
            While the <c>rref</c> method will return an inconsistent matrix.
        </p>
        <sage>
            <input>
                M.augment(identity_matrix(3)).rref()
            </input>
        </sage>
    </subsection>
</section>
